import { Renderer, EventEmitter, ElementRef, ChangeDetectorRef, AfterViewInit } from "@angular/core";
import { Preloader } from "./preloader.service";
import { IconInfo } from "./iselect.interface";
export declare class ISelect implements AfterViewInit {
    private preloader;
    private detector;
    private renderer;
    selectedIndex: number;
    displayItems: IconInfo[];
    favoriteItems: IconInfo[];
    highlightIndex: number;
    slideShowInterval: any;
    slideShowIndex: number;
    searchedData: IconInfo[];
    initianalized: boolean;
    config: {
        totalPage: number;
        currentPage: number;
        open: boolean;
        showFooter: boolean;
        hasError: boolean;
        isFocused: boolean;
        isSearch: boolean;
        loading: boolean;
        selectedItem: IconInfo;
    };
    private iconBox;
    private iconContainer;
    private searchIcon;
    private searchInput;
    private searchButton;
    id: string;
    name: string;
    controlls: any;
    searchEnabled: boolean;
    size: number;
    showIconName: boolean;
    template: any;
    slideShowEnabled: boolean;
    applyLayoutType: boolean;
    applyOpacity: boolean;
    applyPattern: boolean;
    applyAnimation: boolean;
    applySlideShow: boolean;
    entries: IconInfo[];
    onchange: EventEmitter<any>;
    ontoggle: EventEmitter<any>;
    enabledShow: EventEmitter<any>;
    onClick($event: any): void;
    private host;
    constructor(el: ElementRef, preloader: Preloader, detector: ChangeDetectorRef, renderer: Renderer);
    ngAfterViewInit(): void;
    repeat(event: any): void;
    private stopSlideShow;
    private startSlideShow;
    enableShow(event: any): void;
    slideShow(): void;
    addToFavorite(event: any): void;
    mold(event: any): void;
    keyboardTracker($event: KeyboardEvent): boolean;
    keyup(event: any): void;
    performSearch($event: KeyboardEvent, searchString: string): boolean;
    resetSearch(): void;
    next($event: any): boolean;
    prev($event: any): boolean;
    last($event: any): boolean;
    first($event: any): boolean;
    renderIconContainer(): void;
    toggleIconSelector(): void;
    private emitChange;
    private emitToggle;
    private deselectAll;
    selectIcon(index: number): void;
    highlightIcon(index: number): void;
    animation($event: any): void;
    popIcons($event: any): boolean;
    selectedSourceUrl(): string;
}
